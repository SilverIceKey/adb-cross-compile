name: Cross Compile and Release

on:
  push:
    tags:
      - '*'  # 当推送任何 tag 时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # 操作系统
        arch: [x86_64, aarch64, loongarch64]  # 架构
        exclude:
          - os: windows-latest
            arch: loongarch64
          - os: macos-latest
            arch: loongarch64  # 排除不支持的组合

    steps:
    
    - name: Configure Git to handle long paths
      run: git config --system core.longpaths true

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Read Version from Version.txt
      id: get_version
      run: |
        VERSION=$(cat Version.txt)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Setup cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        if [ "${{ matrix.arch }}" == "loongarch64" ]; then
          sudo apt-get install -y gcc-loongarch64-linux-gnu
        elif [ "${{ matrix.arch }}" == "aarch64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        else
          sudo apt-get install -y gcc-multilib
        fi

    - name: Setup build tools (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install make
        # 其他可能需要的工具安装命令

    - name: Cross compile (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd system/core/adb
        if [ "${{ matrix.arch }}" == "loongarch64" ]; then
          make CC=loongarch64-linux-gnu-gcc
        elif [ "${{ matrix.arch }}" == "aarch64" ]; then
          make CC=aarch64-linux-gnu-gcc
        else
          make
        fi

    - name: Cross compile (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd system/core/adb
        if [ "${{ matrix.arch }}" == "aarch64" ]; then
          make CC=aarch64-w64-mingw32-gcc
        else
          make CC=x86_64-w64-mingw32-gcc
        fi

    - name: Create Release Artifact
      run: |
        mkdir -p release/${{ matrix.os }}/${{ matrix.arch }}
        cp system/core/adb/adb release/${{ matrix.os }}/${{ matrix.arch }}/adb-${{ matrix.os }}-${{ matrix.arch }}

    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: adb-${{ matrix.os }}-${{ matrix.arch }}
        path: release/${{ matrix.os }}/${{ matrix.arch }}/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        release_name: "Release ${{ env.VERSION }}"
        files: release/**/adb-*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup
      run: |
        rm -rf release
